pipeline {
    agent any

    parameters {
        string(defaultValue: "develop", description: '', name: 'branch_name_provided')
    }

    stages {
        stage('Build') {
            steps {
                // checkout scm
                // git([url: 'git://example.com/amazing-project.git', branch: 'master'])
                // sh 'git clone https://github.com/PALMDEV/drproject.git'
                
                echo 'Building..'
            
                setBuildStatus("In Progress","PENDING","the real build","${GIT_COMMIT}")
                
                
            }
        }
        stage('Test') {
            steps {
                echo 'Testing..'
                // sh '0'
                // error('stop on test')

                // setBuildStatus("Complete","SUCCESS","the real build","${GIT_COMMIT}")
                

            }
            // post {
            //     failure {
            //         // echo "error"
                    
            //         // error('least')
                    
            //     }


        }
        stage('Deploy') {
            steps {
                echo 'Deploying....'
                // setBuildStatus("Complete","FAILURE","the real build","${GIT_COMMIT}")
                setBuildStatus("Complete","SUCCESS","the real build","${GIT_COMMIT}")
            }
        }
    }
    post {
        success {
            echo "we dit it"
            // setBuildStatus("In Progress","PENDING",jobContext,"${gitCommit}")
        }
        failure {
            
            mail to: 'team@example.com', subject: 'Pipeline failed', body: "${env.BUILD_URL}"
        }


    }

}

def setBuildStatus(String message, String state, String context, String sha) {
    step([
        $class: "GitHubCommitStatusSetter",
        reposSource: [$class: "ManuallyEnteredRepositorySource", url: "https://github.com/luisdavis/drproject.git"],
        contextSource: [$class: "ManuallyEnteredCommitContextSource", context: context],
        errorHandlers: [[$class: "ChangingBuildStatusErrorHandler", result: "UNSTABLE"]],
        commitShaSource: [$class: "ManuallyEnteredShaSource", sha: sha ],
        statusBackrefSource: [$class: "ManuallyEnteredBackrefSource", backref: "${BUILD_URL}flowGraphTable/"],
        statusResultSource: [$class: "ConditionalStatusResultSource", results: [[$class: "AnyBuildResult", message: message, state: state]] ]
    ]);
}